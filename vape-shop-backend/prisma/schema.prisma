generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  email      String   @unique
  name       String?
  password   String
  phone      String   @default("")
  avatarPath String   @default("/uploads/default-avatar.png") @map("avatar_path")
  favorites  Product[]
  reviews    Review[]
  orders     Order[]

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  name        String      @unique
  slug        String      @unique
  description String
  price       Int
  images      String[]
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @map("user_id")
  orderItems  OrderItem[]
  reviews Review[]
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String? @map("category_id")

  @@map("products")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique
  products Product[]
  
  @@map("categories")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  raiting   Int
  text      String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

model Order {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")
  status    EnumOrderStatus @default(PENDING)
  items     OrderItem[]
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @map("user_id")
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quantity  Int
  price     Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @map("order_id")
  
  @@map("order_items")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
